Fix Motion scheduling atomicity - separate async scheduling from task creation

The Problem:
- Motion scheduling is ASYNCHRONOUS - happens after task creation
- Waiting 3 seconds wasn't enough for Motion's auto-scheduler
- This caused Motion IDs to sync but scheduling data remained null

The Fix:
1. Remove arbitrary 3-second wait (was masking the async nature)
2. Add needs_scheduling_refresh flag to track unscheduled tasks
3. Check scheduling data immediately after creation
4. Mark tasks that need scheduling refresh
5. Run refreshMotionSchedulingData twice during slow sync:
   - Before operations (catch previously created tasks)
   - After operations (catch just-created tasks)

This acknowledges that Motion scheduling is inherently async and handles it properly rather than trying to force synchronous behavior.

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>